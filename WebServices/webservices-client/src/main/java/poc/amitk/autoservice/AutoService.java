
/*
 * 
 */

package poc.amitk.autoservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.3
 * Fri Feb 15 02:11:44 MST 2013
 * Generated source version: 2.2.3
 * 
 */


@WebServiceClient(name = "AutoService", 
                  wsdlLocation = "file:/Users/amitkapps/Documents/work/poc/github/pocs/WebServices/webservices-client/src/main/resources/AutoService.wsdl",
                  targetNamespace = "http://amitk.poc/AutoService") 
public class AutoService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://amitk.poc/AutoService", "AutoService");
    public final static QName AutoServiceWSPort = new QName("http://amitk.poc/AutoService", "AutoServiceWSPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/amitkapps/Documents/work/poc/github/pocs/WebServices/webservices-client/src/main/resources/AutoService.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/Users/amitkapps/Documents/work/poc/github/pocs/WebServices/webservices-client/src/main/resources/AutoService.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public AutoService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AutoService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AutoService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns AutoServiceWS
     */
    @WebEndpoint(name = "AutoServiceWSPort")
    public AutoServiceWS getAutoServiceWSPort() {
        return super.getPort(AutoServiceWSPort, AutoServiceWS.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AutoServiceWS
     */
    @WebEndpoint(name = "AutoServiceWSPort")
    public AutoServiceWS getAutoServiceWSPort(WebServiceFeature... features) {
        return super.getPort(AutoServiceWSPort, AutoServiceWS.class, features);
    }

}
